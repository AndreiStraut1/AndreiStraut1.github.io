[gd_scene load_steps=15 format=3 uid="uid://dke8e5hkfdrpe"]

[ext_resource type="Material" uid="uid://byqha5frwpmt6" path="res://materials/grid.tres" id="1_4ape6"]
[ext_resource type="Texture2D" uid="uid://b1jvh1ehiaebt" path="res://textures/industrial_sunset_puresky_4k.hdr" id="2_3y5x7"]
[ext_resource type="PackedScene" uid="uid://dlwuih32kh0ai" path="res://controllers/fps_controller.tscn" id="3_1q8gt"]
[ext_resource type="Texture2D" uid="uid://ivvpsi314b34" path="res://textures/grid.jpg" id="4_rw8v5"]

[sub_resource type="BoxMesh" id="BoxMesh_ahq3c"]
size = Vector3(20, 0.1, 20)

[sub_resource type="BoxShape3D" id="BoxShape3D_qo66f"]
size = Vector3(20, 0.1, 20)

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_gsvn7"]
sky_top_color = Color(0.298039, 0.415686, 1, 1)
sky_horizon_color = Color(0.482353, 0.67451, 0.862745, 1)
sky_cover = ExtResource("2_3y5x7")

[sub_resource type="Sky" id="Sky_4lvgu"]
sky_material = SubResource("ProceduralSkyMaterial_gsvn7")

[sub_resource type="Environment" id="Environment_e34go"]
background_mode = 2
sky = SubResource("Sky_4lvgu")
ssr_enabled = true
ssao_enabled = true
ssil_enabled = true
sdfgi_enabled = true

[sub_resource type="Shader" id="Shader_cwof1"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.dev4's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = (albedo.rgb * albedo_tex.r) + albedo_tex.g + albedo_tex.b;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = (1.0 - albedo_tex.g) * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ns6wr"]
render_priority = 0
shader = SubResource("Shader_cwof1")
shader_parameter/albedo = Color(0.74902, 0.964706, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.48
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("4_rw8v5")
shader_parameter/texture_roughness = ExtResource("4_rw8v5")

[sub_resource type="BoxMesh" id="BoxMesh_4mitp"]
size = Vector3(2, 2, 2)

[sub_resource type="BoxShape3D" id="BoxShape3D_5rhlj"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3by5h"]
render_priority = 0
shader = SubResource("Shader_cwof1")
shader_parameter/albedo = Color(0.772549, 0, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.48
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("4_rw8v5")
shader_parameter/texture_roughness = ExtResource("4_rw8v5")

[node name="Node3D" type="Node3D"]

[node name="Floor" type="MeshInstance3D" parent="."]
transform = Transform3D(0.967788, 0, 0, 0, 0.967788, 0, 0, 0, 0.967788, 0, -0.1, 0)
material_override = ExtResource("1_4ape6")
mesh = SubResource("BoxMesh_ahq3c")

[node name="StaticBody3D" type="StaticBody3D" parent="Floor"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Floor/StaticBody3D"]
shape = SubResource("BoxShape3D_qo66f")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_e34go")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.816594, -0.556728, 0.152409, 0.273751, 0.605994, 0.746881, -0.508169, -0.568176, 0.647256, 0, 5.96538, 4.31842)

[node name="CharacterBody3D" parent="." instance=ExtResource("3_1q8gt")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)

[node name="Box" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.66584, 0.959033, -2.827)
material_override = SubResource("ShaderMaterial_ns6wr")
material_overlay = ExtResource("1_4ape6")
mesh = SubResource("BoxMesh_4mitp")

[node name="StaticBody3D" type="StaticBody3D" parent="Box"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Box/StaticBody3D"]
shape = SubResource("BoxShape3D_5rhlj")

[node name="CSGPolygon3D" type="CSGPolygon3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.78837, 0, 7.51528)
material_override = SubResource("ShaderMaterial_3by5h")
use_collision = true
polygon = PackedVector2Array(0, 0, 0, 1, 3.94238, -0.00802207, 1, 0)
depth = 4.0
